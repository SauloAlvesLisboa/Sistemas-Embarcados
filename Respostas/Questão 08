Código está na parte de baixo:
1. Crie um programa em C que cria uma thread, e faça com que o programa principal envie os valores 1, 2, 3, 4, 5, 6, 7, 8, 9 e 10 para a thread, com intervalos de 1 segundo entre cada envio. Depois de o programa principal enviar o número 10, ele aguarda 1 segundo e termina a execução. A thread escreve na tela cada valor recebido, e quando ela receber o valor 10, ela termina a execução.

2. Crie um programa em C que preenche o vetor 'long int v[50000]' completamente com valores aleatórios (use a função random()), e que procura o valor máximo do vetor por dois métodos:
	(a) Pela busca completa no vetor v[];
	(b) Separando o vetor em 4 partes, e usando 4 threads para cada uma encontrar o máximo de cada parte. Ao final das threads, o programa principal compara o resultado das quatro threads para definir o máximo do vetor.
Ao final do programa principal, compare os resultados obtidos pelos dois métodos.

3. Repita o exercício anterior, mas calcule a média do vetor ao invés do valor máximo.

4. Repita o exercício anterior, mas calcule a variância do vetor ao invés da média.

Código:
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

volatile int i;

void* print (void* c)
{
	int *numero = (int *) c;
	while (1) fputc(*charactere, stderr);
	return NULL;
}

void* print(void* c)
{
	//int *numeros = (int *) i;
	
	while(1){
		printf("%d\n",i);
		sleep(1);
	}

	return NULL;
}

int main ()
{
	pthread_t thread_id1;
	
	pthread_create(&thread_id1, NULL, &print, NULL);

	for(i=1;i<10;i++){
		sleep(1);
	}
	
	sleep(1);
	printf("Terminando programa\n");

	return 0;
}

2)    
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

volatile long int maiores[4]; // Vetor para guardar maior valor das buscas.

void* search1(void *v)
{
	long int *vetor = (long int *) v;
	int i;

	maiores[0] = vetor[0];

	for(i=0;i<12500;i++)
	{
		if(vetor[i]>maiores[0])
		{
			maiores[0] = vetor[i];
		}
	}
}

void* search2(void *v)
{
	long int *vetor = (long int *) v;
	int i;

	maiores[1] = vetor[0];

	for(i=12500;i<25000;i++)
	{
		if(vetor[i]>maiores[1])
		{
			maiores[1] = vetor[i];
		}
	}
}

void* search3(void *v)
{
	long int *vetor = (long int *) v;
	int i;

	maiores[2] = vetor[0];
	for(i=25000;i<37500;i++)
	{
		if(vetor[i]>maiores[2])
		{
			maiores[2] = vetor[i];
		}
	}
}

void* search4(void *v)
{
	long int *vetor = (long int *) v;
	int i;

	maiores[3] = vetor[0];
	for(i=37500;i<50000;i++){
		if(vetor[i]>maiores[3]){
			maiores[3] = vetor[i];
		}
	}
}

long int maior_numero(long int *v)
{

	long int max_val;
	int i;

	max_val = v[0];
	for(i=0;i<50000;i++)
	{
		if(v[i] > max_val)
		{
			max_val = v[i];
		}
	}

	return max_val;
}

int main ()
{
	// Declarando as Threads

	pthread_t thread_id1;
	pthread_t thread_id2;
	pthread_t thread_id3;
	pthread_t thread_id4;
	
	// Declarando Vetor
	long int v[50000];
	int i; // Contador
	long int max_valor; // Valor maximo encontrado

	//criando vetor

	for(i=0;i<50000;i++)
	{
		v[i] = random(); // Atribuindo valores aleatórios.
	}

	//iniciando threads

	pthread_create(&thread_id1, NULL,&search1,v);
	pthread_create(&thread_id2, NULL,&search2,v);
	pthread_create(&thread_id3, NULL,&search3,v);
	pthread_create(&thread_id4, NULL,&search4,v);
	pthread_join(thread_id4,NULL);
	pthread_join(thread_id3,NULL);
	pthread_join(thread_id2,NULL);
	pthread_join(thread_id1,NULL);

	//comparando resultados das 4 threads

	max_valor = maiores[0];

	for (i = 0; i < 4; i++)
	{
		if(maiores[i] > max_valor){
			max_valor = maiores[i];
		}
	}
	// Maior valor da busca dividida

	printf("Maior valor por busca dividida: %ld\n", max_valor);

	//Maiot valor da busca completa

	max_valor = maior_numero(v);
	
	printf("Maior valor por busca completa: %ld\n",max_valor);


	return 0;
}

3) 

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

struct vetor_media
{
	long int vetor[50000];
	double media1;
	double media2;
	double media3;	
	double media4;
};



void* search1(void *v)
{
	struct vetor_media* p = (struct vetor_media*) v; 
	int i;
	long int soma=0;
	p->media1=0;

	//maiores[0] = vetor[0];

	for(i=0;i<12500;i++)
	{

		soma=soma+p->vetor[i];
	}

	p->media1 = ((double)soma)/12500;
	v =  p;
}
void* search2(void *v)
{
	struct vetor_media* p = (struct vetor_media*) v; 
	int i;
	long int soma=0;
	p->media2=0;

	//maiores[0] = vetor[0];

	for(i=12500;i<25000;i++)
	{

		soma=soma+p->vetor[i];
	}

	p->media2 = ((double)soma)/12500;
	v =  p;
}
void* search3(void *v)
{
	struct vetor_media* p = (struct vetor_media*) v; 
	int i;
	long int soma=0;
	p->media3=0;

	//maiores[0] = vetor[0];

	for(i=25000;i<37500;i++)
	{

		soma=soma+p->vetor[i];
	}

	p->media3 = ((double)soma)/12500;
	v =  p;
}
void* search4(void *v)
{
	struct vetor_media* p = (struct vetor_media*) v; 
	int i;
	long int soma=0;
	p->media4=0;
	//maiores[0] = vetor[0];

	for(i=37500;i<50000;i++)
	{

		soma=soma+p->vetor[i];
	}

	p->media4 = ((double)soma)/12500;
	v =  p;
}




double calcula_media(long int *v)
{
	long int soma = 0;
	double media_funcao=0;
	int i;

	for(i=0;i<50000;i++)
	{
		soma += v[i];	
	}
	
	media_funcao = ((double)soma) /50000.00;
	return media_funcao;
}

int main ()
{
	
	long int v[50000];
	int i;
	double media_total=0;
	double media_total2=0;
	pthread_t thread_id1;
	pthread_t thread_id2;
	pthread_t thread_id3;
	pthread_t thread_id4;
	struct vetor_media a; 

	//criando vetor

	for(i=0;i<50000;i++)
	{
		v[i]= random();
		a.vetor[i] = v[i];
	}

	pthread_create(&thread_id1, NULL,&search1,&a);
	pthread_create(&thread_id2, NULL,&search2,&a);
	pthread_create(&thread_id3, NULL,&search3,&a);
	pthread_create(&thread_id4, NULL,&search4,&a);
	pthread_join(thread_id1,NULL);
	pthread_join(thread_id2,NULL);
	pthread_join(thread_id3,NULL);
	pthread_join(thread_id4,NULL);

	printf("Media por thread1: %.2lf\n",a.media1);
	printf("Media por thread1: %.2lf\n",a.media2);
	printf("Media por thread1: %.2lf\n",a.media3);
	printf("Media por thread1: %.2lf\n",a.media4);

	media_total= a.media1 + a.media2 + a.media3 + a.media4;
	media_total = media_total/4;
	
	printf("Media final por thread: %.2lf\n",media_total);
	//valor da busca completa


	media_total2 = calcula_media(v);
	
	printf("Media por busca completa: %.2lf\n",media_total2);


	return 0;
}
